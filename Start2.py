import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from pynput.keyboard import Key, Controller
from pynput.mouse import Controller as MouseController
import pyautogui
from Mousemove import MouseMover
from selenium.common.exceptions import TimeoutException
from urllib3.exceptions import ReadTimeoutError
import pyperclip
import TabHandle
import pygetwindow as gw
from selenium.common.exceptions import WebDriverException

# C√†i pywin32 n·∫øu kh√¥ng c√†i ƒë∆∞∆°c 3 th∆∞ vi·ªán n√†y
import win32api
import win32gui
import win32con

mover = MouseMover()
keyboard = Controller()
mouse = MouseController()


def get_taskbar_height():
    monitor = win32api.MonitorFromPoint((0, 0), win32con.MONITOR_DEFAULTTONEAREST)
    monitor_info = win32api.GetMonitorInfo(monitor)
    work_area = monitor_info['Work']

    screen_height = win32api.GetSystemMetrics(1)
    work_height = work_area[3] - work_area[1]

    return screen_height - work_height


def bring_debugging_chrome_to_front():
    try:
        chrome_windows = [w for w in gw.getWindowsWithTitle('Chrome')]

        if not chrome_windows:
            print("Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï Chrome.")
            return

        # ∆Øu ti√™n c·ª≠a s·ªï kh√¥ng c√≥ ti√™u ƒë·ªÅ c·ª• th·ªÉ n√†o (th∆∞·ªùng l√† tab tr·ªëng)
        target_window = None
        for w in chrome_windows:
            if w.title.strip() == "" or "New Tab" in w.title or "Google" in w.title:
                target_window = w
                break

        if not target_window:
            target_window = chrome_windows[0]

        print(f"ƒê∆∞a Chrome '{target_window.title}' ra tr∆∞·ªõc m√†n h√¨nh...")
        target_window.activate()
        time.sleep(1)
        target_window.maximize()
        time.sleep(1)

    except Exception as e:
        print(f"L·ªói khi ƒë∆∞a Chrome ra tr∆∞·ªõc m√†n h√¨nh: {str(e)}")


def check_driver_and_reconnect(driver):
    try:
        # Th·ª≠ ch·∫°y 1 l·ªánh ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra driver c√≤n ho·∫°t ƒë·ªông
        _ = driver.title  # G·ªçi l·ªánh b·∫•t k√¨ ƒë·ªÉ xem driver c√≤n s·ªëng kh√¥ng
        print("‚úÖ Driver v·∫´n ƒëang k·∫øt n·ªëi b√¨nh th∆∞·ªùng.")
        return driver  # Tr·∫£ v·ªÅ driver hi·ªán t·∫°i n·∫øu v·∫´n ho·∫°t ƒë·ªông

    except WebDriverException as e:
        print("‚ùå Driver ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi:", str(e))
        print("üîÑ ƒêang ti·∫øn h√†nh k·∫øt n·ªëi l·∫°i...")

        try:
            # K·∫øt n·ªëi l·∫°i v·ªõi Chrome qua debugger address
            chrome_options = Options()
            chrome_options.add_experimental_option("debuggerAddress", "localhost:9222")
            driver = webdriver.Chrome(options=chrome_options)
            driver.set_page_load_timeout(15)
            print("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng.")
            return driver

        except Exception as reconnect_error:
            print("‚ùå K·∫øt n·ªëi l·∫°i th·∫•t b·∫°i:", str(reconnect_error))
            return None


def start_browsers(profile_count, screen_scale_x, screen_scale_y):
    while True:
        try:
            # T√≠nh profile name theo profile_count
            if profile_count == 1:
                profile_name = "Default"
            else:
                profile_name = f"Profile {profile_count}"

            # L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
            width, height = pyautogui.size()

            pyautogui.press('win')  # M·ªü Start Menu
            time.sleep(1)

            # Chu·∫©n b·ªã l·ªánh kh·ªüi ƒë·ªông Chrome v·ªõi profile t∆∞∆°ng ·ª©ng
            command = f'chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\\ChromeDebugProfiles" --profile-directory="{profile_name}"'
            pyperclip.copy(command)
            time.sleep(0.5)

            # D√°n l·ªánh v√†o √¥ t√¨m ki·∫øm r·ªìi nh·∫•n Enter
            pyautogui.hotkey('ctrl', 'v')
            time.sleep(2)
            keyboard.press(Key.enter)
            keyboard.release(Key.enter)
            print(f"ƒê√£ m·ªü Chrome v·ªõi profile: {profile_name}")
            time.sleep(3)

            start_x, start_y = pyautogui.position()
            mover.test_move((start_x, start_y), (1100 * screen_scale_x, 273 * screen_scale_y))
            pyautogui.click()
            time.sleep(1)

            start_x, start_y = pyautogui.position()
            mover.test_move((start_x, start_y), (1030 * screen_scale_x, 273 * screen_scale_y))
            pyautogui.click()

            try:
                chrome_options = Options()
                chrome_options.add_experimental_option("debuggerAddress", "localhost:9222")
                driver = webdriver.Chrome(options=chrome_options)
                driver.set_page_load_timeout(15)
                print("ƒê√£ k·∫øt n·ªëi v·ªõi selenium, kh·ªüi t·∫°o driver th√†nh c√¥ng.")

                print("Chu·∫©n b·ªã ki·ªÉm tra window_size")
                # Ki·ªÉm tra v√† maximize n·∫øu ch∆∞a ph·∫£i fullscreen
                try:
                    handles = driver.window_handles
                    print(f"üß© S·ªë tab hi·ªán c√≥: {len(handles)}")

                    for idx, handle in enumerate(handles):
                        try:
                            driver.switch_to.window(handle)
                            current_url = driver.current_url
                            title = driver.title
                            print(f"\nüìÑ Tab {idx + 1}:")
                            print(f"üÜî Handle ID: {handle}")
                            print(f"üîó URL: {current_url}")
                            print(f"üìù Title: {title}")
                        except Exception as tab_err:
                            print(f"\n‚ùå L·ªói khi truy c·∫≠p tab {idx + 1} (handle: {handle}): {tab_err}")

                    # Sau khi duy·ªát xong, th·ª≠ l·∫•y window_size ·ªü tab ƒë·∫ßu ti√™n (n·∫øu c·∫ßn)
                    TabHandle.switch_tab_to(driver, "new-tab")
                    window_size = driver.get_window_size()
                    print(f"\nüìê K√≠ch th∆∞·ªõc c·ª≠a s·ªï tr√¨nh duy·ªát: {window_size}")

                except Exception as e:
                    print("‚ùå L·ªói khi l·∫•y k√≠ch th∆∞·ªõc browser ho·∫∑c thao t√°c v·ªõi c√°c tab:", e)

                try:
                    screen_size = pyautogui.size()
                    print(f"K√≠ch th∆∞·ªõc m√†n h√¨nh: {screen_size}")
                except Exception as e:
                    print("L·ªói khi l·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh b·∫±ng pyautogui.size():", e)
                print("ƒê√£ l·∫•y ƒë∆∞·ª£c tr·∫°ng th√°i window_size")

                if window_size["width"] < screen_size.width or window_size["height"] < screen_size.height:
                    print("C·ª≠a s·ªï ch∆∞a maximize. ƒêang th·ª±c hi·ªán maximize...")
                    driver.maximize_window()
                    time.sleep(1)
                else:
                    print("C·ª≠a s·ªï ƒë√£ ·ªü ch·∫ø ƒë·ªô maximize.")

                driver.get("https://www.facebook.com/")
                print("ƒê√£ m·ªü Facebook")
                driver.implicitly_wait(2)

                time.sleep(2)
                driver.execute_script("window.open('https://chat.openai.com', '_blank');")
                print("ƒê√£ m·ªü ChatGPT")

                time.sleep(3)
                # Chuy·ªÉn v·ªÅ Facebook
                TabHandle.switch_tab_to(driver, "facebook")

                # üëâ L·∫•y devicePixelRatio (DPR)

                dpr = driver.execute_script("return window.devicePixelRatio")

                print(f"Device Pixel Ratio (DPR): {dpr}")

                # L·∫•y chi·ªÅu cao viewport
                viewport_height_raw = driver.execute_script("return window.innerHeight")
                viewport_height = viewport_height_raw * dpr
                print(f"Chi·ªÅu cao viewport: {viewport_height} px")

                # L·∫•y chi·ªÅu cao taskbar
                taskbar_height = get_taskbar_height()
                print(f"Chi·ªÅu cao taskbar: {taskbar_height} px")

                tab_bar_height = height - viewport_height - taskbar_height
                print(f"Chi·ªÅu cao thanh tab v√† thanh ƒë·ªãa ch·ªâ l√† {tab_bar_height} px")

                time.sleep(2)

                # X√°c ƒë·ªãnh theme browser l√† light hay dark
                is_dark_mode = driver.execute_script(
                    "return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;"
                )

                if is_dark_mode:
                    print("theme c·ªßa tr√¨nh duy·ªát hi·ªán t·∫°i l√† dark")
                else:
                    print("theme c·ªßa tr√¨nh duy·ªát hi·ªán t·∫°i l√† light")

                time.sleep(2)
                bring_debugging_chrome_to_front()
                time.sleep(2)

                print("Ki·ªÉm tra driver tr∆∞·ªõc khi k·∫øt th√∫c start_browsers")
                driver = check_driver_and_reconnect(driver)

                return driver, tab_bar_height, dpr, is_dark_mode, taskbar_height

            except (TimeoutException, ReadTimeoutError) as e:
                print(f"L·ªói khi k·∫øt n·ªëi v·ªõi Chrome: {str(e)}. Th·ª≠ l·∫°i sau 3 gi√¢y...")
                time.sleep(3)
                TabHandle.click_close_window()
                time.sleep(3)
                continue

        except Exception as e:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong v√≤ng l·∫∑p: {str(e)}. Th·ª≠ l·∫°i sau 3 gi√¢y...")
            time.sleep(3)
            continue
